import { BaseApi } from './Base';
import { AsyncTabpage } from './Tabpage';
import { AsyncBuffer } from './Buffer';
export interface AsyncWindow extends Window, Promise<Window> {
}
export declare class Window extends BaseApi {
    prefix: string;
    /**
     * The windowid that not change within a Vim session
     */
    readonly id: number;
    /** Get current buffer of window */
    readonly buffer: AsyncBuffer;
    /** Get the Tabpage that contains the window */
    readonly tabpage: AsyncTabpage;
    /** Get cursor position */
    /** Set cursor position */
    cursor: [number, number] | Promise<[number, number]>;
    /** Get window height by number of rows */
    /** Set window height by number of rows */
    height: number | Promise<number>;
    /** Get window width by number of columns */
    /** Set window width by number of columns  */
    width: number | Promise<number>;
    /** Get window position */
    readonly position: Promise<[number, number]>;
    /** 0-indexed, on-screen window position(row) in display cells. */
    readonly row: Promise<number>;
    /** 0-indexed, on-screen window position(col) in display cells. */
    readonly col: Promise<number>;
    /** Is window valid */
    readonly valid: Promise<boolean>;
    /** Get window number */
    readonly number: Promise<number>;
    /**
     * Closes window
     *
     * @param {Boolean} force Force close window
     */
    close(force?: boolean): Promise<any>;
    /**
     * Configure window position. Currently this is only used to
     * configure floating and external windows (including changing a
     * split window to these types).
     *
     * See documentation at |nvim_open_win()|, for the meaning of
     * parameters. Pass in -1 for 'witdh' and 'height' to keep
     * exiting size.
     *
     * When reconfiguring a floating window, absent option keys will
     * not be changed. The following restriction apply: `row`, `col`
     * and `relative` must be reconfigured together. Only changing a
     * subset of these is an error.
     *
     * @param {Window}  window Window handle
     * @Param {Object}  options Options object
     */
    config(options?: object): Promise<any>;
}
